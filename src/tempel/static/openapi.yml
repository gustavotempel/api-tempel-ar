openapi: 3.0.0
info:
  title: "Tempel API"
  version: "1.0.0"

servers:
  - url: http://api.tempel.ar
    description: Main server
  - url: http://localhost:5000
    description: Internal local server for testing

paths:
  /auth/token:
    post:
      tags:
        - "authentication"
      summary: "Retrieves an authentication token"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                username:
                  type: string
                password:
                  type: string
              required:
                - grant_type
                - username
                - password
      responses:
        200:
          description: "Successfully retrived token"
        400:
          description: "Unsopported grant type"

  /products/{product_id}:
    get:
      tags:
        - "product"
      summary: "Get a product in the store"
      security:
        - ApiKeyAuth: [write]
      operationId: "get_product"
      parameters:
        - name: "product_id"
          in: "path"
          description: "The id of the product to retrieve"
          required: true
          type: "string"
      responses:
        200:
          description: "Successfully retrived product"
          schema:
            $ref: "#/components/schemas/Product"
        404:
          description: "Product doesn't exist"
      x-swagger-router-controller: "test_api.web.controllers.products_controller"
    delete:
      tags:
        - "product"
      summary: "Remove a product in the store"
      operationId: "remove_product"
      parameters:
        - name: "product_id"
          in: "path"
          description: "The id of the product to remove from the store"
          required: true
          type: "string"
      responses:
        202:
          description: "Successfully deleted product"
        404:
          description: "Product doesn't exist"
      x-swagger-router-controller: "test_api.web.controllers.products_controller"
    put:
      tags:
        - "product"
      summary: "Update and replace a product in the store"
      operationId: "update_product"
      parameters:
        - name: "product_id"
          in: "path"
          description: "The id of the product to update from the store"
          required: true
          type: "string"
        - name: "Product"
          in: "body"
          required: true
          schema:
            $ref: "#/components/schemas/Product"
      responses:
        200:
          description: "Successfully updated product"
        404:
          description: "Product doesn't exist"
      x-swagger-router-controller: "test_api.web.controllers.products_controller"
  /products:
    get:
      tags:
        - "product"
      summary: "Gets all products in the store"
      operationId: "get_all_products"
      responses:
        200:
          description: "Successfully received all products."
          schema:
            $ref: "#/components/schemas/Product"
      x-swagger-router-controller: "test_api.web.controllers.products_controller"
    post:
      tags:
        - "product"
      summary: "Add a new product to the store"
      operationId: "add_product"
      parameters:
        - in: "body"
          name: "body"
          description: "Product to add to the store"
          required: true
          schema:
            $ref: "#/components/schemas/Product"
      responses:
        201:
          description: "Product added"
      x-swagger-router-controller: "test_api.web.controllers.products_controller"

components:
  schemas:
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    Product:
      type: "object"
      required:
        - "name"
        - "price"
        - "url"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        price:
          type: "number"
          format: "float"
        url:
          type: "string"
      example:
        id: 1
        name: "sample_product"
        price: 100.00
        url: "http://sample_image.com"



  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: access_token
      # name: X-API-Key
    # BasicAuth:
    #   type: http
    #   scheme: basic
    # BearerAuth:
    #   type: http
    #   scheme: bearer
    # OpenID:
    #   type: openIdConnect
    #   openIdConnectUrl: https://example.com/.well-known/openid-configuration
    # OAuth2:
    #   type: oauth2
    #   flows:
    #     authorizationCode:
    #       authorizationUrl: https://example.com/oauth/authorize
    #       tokenUrl: https://example.com/oauth/token
    #       scopes:
    #         read: Grants read access
    #         write: Grants write access
    #         admin: Grants access to admin operations
